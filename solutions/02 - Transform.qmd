---
title: "Transform Data"
format: html
editor: visual
---

```{r, message=FALSE}
library(tidyverse)
covid_testing <- read_csv("covid_testing.csv")
```

## select( )

### Example from slides

```{r}
select(covid_testing, mrn, last_name)   # select columns to keep
```

### Knowledge Check 1

```{r}
# Which of these would select just the first_name column from the covid_testing data frame?

select(first_name, covid_testing)  #A
select(covid_testing, first_name)  #B **CORRECT ANSWER**
select(covid_testing, -first_name) #C
select(covid_testing, First_Name)  #D

```

## filter( )

### Example from slides

```{r}
filter(covid_testing, mrn == 5000078)  # filter to specific rows
```

```{r}
filter(covid_testing, last_name == "stark")
```

### Knowledge Check 2

```{r}
# Which of these would filter the covid_testing data frame to tests with positive results?

filter(covid_testing, result == positive)   #A
filter(covid_testing, result = "positive")  #B
filter(covid_testing, result == "positive") #C **CORRECT ANSWER**
filter(covid_testing, positive == "result") #D

```

## Pipes: %>%

### Example from slides

```{r}
select(
		filter(
		  covid_testing, 
	        pan_day <= 10
		),
		clinic_name
	    )
```


```{r}
covid_testing %>% 
	filter(pan_day <= 10) %>% 
	select(clinic_name)
```

### Knowledge Check 3

```{r}
#Which of the following is equivalent to:
covid_testing %>% select(result)

covid_testing(select(result)) #A
select(covid_testing(result)) #B
select(result, covid_testing) #C
select(covid_testing, result) #D **CORRECT ANSWER**

```

## mutate( )

### Example from slides

```{r}
covid_testing %>%
	mutate(c_r_tat_mins = col_rec_tat*60)
```

## Your Turn #1

### Exercise 1

Fill in the blanks: use select, filter and %>% in the following chunk to write a data pipeline that:

a) Filters to tests from the clinic (column name is `clinic_name`) of "picu"

b) Selects the column with the received-to-verified turnaround time (column name is `rec_ver_tat`) as well as the day from start of the pandemic (`pan_day`)

```{r}
covid_testing %>% # name of data frame goes here
  filter(clinic_name == "picu") %>% #logical statement defining orders where clinic_name is picu
  select(rec_ver_tat, pan_day)  
```

### Exercise 2

a) Use mutate with %>% to create a data frame with a new column named "total_tat" containing the total turnaround time for each test (sum of `col_rec_tat` and `rec_ver_tat`). 

b) Store this new data frame back in the covid_testing object. 

c) View the data in a new tab by calling the object with the View( ) function.

```{r}
covid_testing <- covid_testing %>%
	mutate(total_tat = sum(col_rec_tat,rec_ver_tat))

View(covid_testing)
```

**Stop Here**

## group_by

### Example from slides

```{r}
covid_testing %>%
	group_by(pan_day)
```

## summarize

### Example from slides

```{r}
covid_testing %>%
		summarize(order_count = n(),
		          day_count = n_distinct(pan_day))
```

```{r}
covid_testing %>%
	group_by(pan_day) %>%
	summarize(order_count = n())
```

## Your Turn #2

You are interested in understanding the relative utilization of COVID tests and the range of turnaround times across locations, which are captured with the  variable. Use group_by and summarize to:

a) Group the `covid_testing` dataframe by clinic/unit (column is `clinic_name`)

b) Create a new summary variable, "num_orders", containing the calculated number of orders ordered by each clinic/unit.

c) Create a new summary variable, "median_tat", containing the calculated median receive to verify turnaround time (`rec_ver_tat` column) for each clinic/unit.

HINT: The function to count rows was discussed in the lecture.
HINT: The function to calculate a median is (predictably) median(...).

Store the output from your summarization in a new object called covid_summary.

```{r}
covid_summary <- covid_testing %>%
  group_by(clinic_name) %>%
  summarize(num_orders = n(),
            median_tat = median(rec_ver_tat))
View(covid_summary)
```
